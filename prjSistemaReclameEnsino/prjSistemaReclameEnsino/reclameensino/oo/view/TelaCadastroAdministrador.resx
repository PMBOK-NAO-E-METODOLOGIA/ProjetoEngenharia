<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>